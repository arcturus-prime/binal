mod external;
mod ir;
mod x86;

use clap::{Parser, Subcommand};
use ir::print_instructions;
use x86::lift_block;

#[derive(Subcommand, Debug, Clone)]
enum Command {}

#[derive(Parser, Debug)]
#[command(version, about)]
struct Arguments {
    #[command(subcommand)]
    command: Command,
}

fn main() {
    env_logger::init();
    let code = [
        0x48, 0x83, 0xec, 0x78, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x4c, 0x24, 0x70, 0x48,
        0x83, 0xc1, 0x18, 0x48, 0x89, 0x4c, 0x24, 0x28, 0x48, 0x8d, 0x4c, 0x24, 0x40, 0xe8, 0x8f,
        0x97, 0x03, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x28, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x4c, 0x8d,
        0x05, 0x06, 0x1f, 0x12, 0x00, 0xe8, 0xb9, 0xfa, 0x03, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x30,
        0x48, 0x83, 0xc1, 0x30, 0x48, 0x89, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x4c, 0x24, 0x58, 0xe8,
        0xe1, 0x97, 0x03, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x54, 0x24, 0x58, 0x4c,
        0x8d, 0x05, 0xf0, 0x1e, 0x12, 0x00, 0xe8, 0xab, 0xe9, 0x03, 0x00, 0x90, 0x48, 0x83, 0xc4,
        0x78, 0xc3,
    ];

    let out_code = lift_block(&code, 0);
    let output = print_instructions(&out_code).unwrap();

    println!("{}", output)
}
